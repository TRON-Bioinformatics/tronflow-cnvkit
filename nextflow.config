/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    tron/tronflow-copy-number-calling Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
 */

params {
	// Workflow flags:

	// Mandatory arguments
	input_files = false

	// References
	reference = false
	intervals = false

	// Main options
	tools = false
	output = 'output'

	// CNVkit-related options
	// None ...

	// Sequenza-related options
	VROOM_CONNECTION_SIZE = "500000000"

	// Other options
	help = false

	// Max resource options
	cpus = 1
	memory = '3.GB'
}

process {
    withName: CNVKIT_BATCH {
        publishDir = [
            path: { "${params.output}/cnvkit" },
            mode: 'copy'
        ]
        cpus = "${params.cpus}"
        memory = "${params.memory}"
    }
    withName: SEQUENZAUTILS_BAM2SEQZ {
        publishDir = [
            path: { "${params.output}/sequenza" },
            mode: 'copy'
        ]
        cpus = "${params.cpus}"
        memory = "${params.memory}"
    }
    withName: SEQUENZAUTILS_SEQZBINNING {
        publishDir = [
            path: { "${params.output}/sequenza" },
            mode: 'copy'
        ]
        cpus = "${params.cpus}"
        memory = "${params.memory}"
    }
    withName: R_SEQUENZA {
        publishDir = [
            path: { "${params.output}/sequenza" },
            mode: 'copy'
        ]
        cpus = "${params.cpus}"
        memory = "${params.memory}"
    }
}

profiles {
    debug {
        cleanup = false
        dumpHashes = true
        process.beforeScript = 'echo $HOSTNAME'
    }
    conda {
        conda.enabled = true
        params.enable_conda = true
        conda.createTimeout = "120 min"
    }
    mamba {
        conda.enabled = true
        params.enable_conda = true
        conda.createTimeout = "120 min"
        conda.useMamba = true
    }
    test { 
        includeConfig 'conf/test.config' 
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.output}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.output}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.output}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.output}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

VERSION = '0.2.2'
DOI = '10.5281/zenodo.7248131'

manifest {
  name = 'tron/tronflow-copy-number-calling'
  author = 'Pablo Riesgo-Ferreiro, Jonas Ibn-Salem, Julian Thomas Mohr'
  homePage = 'https://gitlab.rlp.net/tron/tronflow-copy-number-calling'
  description = 'Nextflow pipeline for copy number calling using different tools'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = VERSION
  doi = DOI
}
params.manifest = manifest

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

params.help_message = """
TronFlow Copy Number Calling v${VERSION}

Nextflow pipeline for copy number calling using different tools

Usage:
    nextflow run main.nf -profile conda --input_files input_files.tsv --reference reference.fasta --intervals target_region.bed

Input:
    * input_files: the path to a tab-separated values file containing in each row the sample name, tumor bam and normal bam
    The input file does not have header!
    Example input file:
    name1	tumor_bam1	normal_bam1
    name2	tumor_bam2	normal_bam2
    * reference: path to the FASTA genome reference
    * intervals: path to the BED file with the targeted region
    * tools: tools to perform CN calling with (single and multiple entries possible, use ',' as delimiter) [ cnvkit, sequenza ]

Optional input:
    * output: the folder where to publish output (default: output)
    * VROOM_CONNECTION_SIZE: value for the environment variable VROOM_CONNECTION_SIZE which sometimes causes trouble with sequenza (default: 500000000)
    * cpus: the number of CPUs used by each job (default: 1)
    * memory: the ammount of memory used by each job (default: 4g)

Output:
    CNVkit:  
    * cnvkit/*.antitarget.bed : antitarget regions  
    * cnvkit/*.target.bed : target regions  
    * cnvkit/reference.cnn  
    * cnvkit/*.tumor.targetcoverage.cnn : binned tumor coverage in target region  
    * cnvkit/*.normal.targetcoverage.cnn : binned normal coverage in target region  
    * cnvkit/*.tumor.antitargetcoverage.cnn : binned tumor coverage in anti-target region  
    * cnvkit/*.normal.antitargetcoverage.cnn : binned normal coverage in ani-target region  
    * cnvkit/*.tumor.bintest.cns  
    * cnvkit/*.tumor.cnr : copy number ratios  
    * cnvkit/*.tumor.cns  
    * cnvkit/*.tumor.call.cns : copy number segments  
    Sequenza:  
    * sequenza/*.gz
    * sequenza/*.binned.gz  
    * sequenza/*_alternative_solutions.txt  
    * sequenza/*_confints_CP.txt  
    * sequenza/*_segments.txt  
    * sequenza/*_sequenza_log.txt : sequenza log file  
    * sequenza/*_alternative_fit.pdf  
    * sequenza/*_chromosome_depths.pdf  
    * sequenza/*_chromosome_view.pdf  
    * sequenza/*_CN_bars.pdf  
    * sequenza/*_CP_contours.pdf
    * sequenza/*_gc_plots.pdf  
    * sequenza/*_genome_view.pdf
    * sequenza/*_model_fit.pdf  
    * sequenza/*_sequenza_cp_table.RData  
    * sequenza/*_sequenza_extract.RData  
	
  """
