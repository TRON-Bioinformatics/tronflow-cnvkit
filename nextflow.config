
params.cpus = 1
params.memory = '3g'

process {
    withName: CNVKIT_BATCH {
        publishDir = [
            path: { "${params.output}" },
            mode: 'copy'
        ]
        cpus = "${params.cpus}"
        memory = "${params.memory}"
    }
    withName: SEQUENZAUTILS_BAM2SEQZ {
        publishDir = [
            path: { "${params.output}" },
            mode: 'copy'
        ]
        cpus = "${params.cpus}"
        memory = "${params.memory}"
    }
    withName: SEQUENZAUTILS_SEQZBINNING {
        publishDir = [
            path: { "${params.output}" },
            mode: 'copy'
        ]
        cpus = "${params.cpus}"
        memory = "${params.memory}"
    }
}

profiles {
  conda {
    params.enable_conda = true
    conda { createTimeout = "120 min" }
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  test {
    params.reference = "$baseDir/test_data/ucsc.hg19.minimal.fasta"
    params.intervals = "$baseDir/test_data/minimal_intervals.bed"
    timeline.enabled = false
    report.enabled = false
    trace.enabled = false
    dag.enabled = false
  }
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

cleanup = true

VERSION = '0.2.0'
DOI = 'doi'

manifest {
  name = 'TRON-Bioinformatics/tronflow-copy-number-calling'
  author = 'Pablo Riesgo-Ferreiro, Jonas ibn-Salem'
  homePage = 'https://github.com/TRON-Bioinformatics/tronflow-copy-number-calling'
  description = 'Copy number calling pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = VERSION
  doi = DOI
}
params.manifest = manifest

params.help_message = """
nextflow run tron-bioinformatics/tronflow-copy-number-calling --help

Usage:
    nextflow run tron-bioinformatics/tronflow-copy-number-calling -profile conda --input_files input_files --reference reference.fasta --intervals target_region.bed

Input:
    * input_files: the path to a tab-separated values file containing in each row the sample name, tumor bam and normal bam
    The input file does not have header!
    Example input file:
    name1	tumor_bam1	normal_bam1
    name2	tumor_bam2	normal_bam2
    * reference: path to the FASTA genome reference
    * intervals: path to the BED file with the targeted region


Optional input:
    * output: the output folder
    * cpus: number of reserved CPUs
    * memory: amount of reserved memory

Output:
    * *.antitarget.bed
    * *.target.bed
    * reference.cnn
    * *.tumor.targetcoverage.cnn : binned tumor coverage in target region
    * *.normal.targetcoverage.cnn : binned normal coverage in target region
    * *.tumor.antitargetcoverage.cnn : binned tumor coverage in anti-target region
    * *.normal.antitargetcoverage.cnn : binned normal coverage in ani-target region
    * *.tumor.cnr : copy number ratios
    * *.tumor.call.cns : copy number segments
  """
